一、为什么 Nginx可以采用异步非阻塞的方式来处理
看看一个请求的完整过程：请求过来，要建立连接，然后再接收数据，接收数据后，再发送数据。

具体到系统底层，就是读写事件，而当读写事件没有准备好时，必然不可操作，如果不用非阻塞的方式来调用，那就得阻塞调用了，事件没有准备好，那就只能等了，等事件准备好了，你再继续吧。阻塞调用会进入内核等待，cpu就会让出去给别人用了，对单线程的worker来说，显然不合适，当网络事件越多时，大家都在等待呢，cpu空闲下来没人用，cpu利用率自然上不去了，更别谈高并发了。好吧，你说加进程数，这跟 apache的线程模型有什么区别，注意，别增加无谓的上下文切换。所以，在nginx里面，最忌讳阻塞的系统调用了。不要阻塞，那就非阻塞喽。非阻塞就是，事件没有准备好，马上返回EAGAIN，告诉你，事件还没准备好呢，你慌什么，过会再来吧。好吧，你过一会，再来检查一下事件，直到事件准备好了为止，在这期间，你就可以先去做其它事情，然后再来看看事件好了没。虽然不阻塞了，但你得不时地过来检查一下事件的状态，你可以做更多的事情了，但带来的开销也是不小的。

二、Nginx 的优点
【1】速度更快：这表现在两个方面：一方面，在正常情况下，单次请求会得到更快的响应；另一方面，在高峰期（如有数以万计的并发请求），Nginx 可以比其他 Web服务器更快地响应请求。
【2】高扩展性，跨平台：Nginx 的设计极具扩展性，它完全是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成。因此，当对某一个模块修复 Bug或进行升级时，可以专注于模块自身，无须在意其他。而且在 HTTP模块中，还设计了 HTTP过滤器模块：一个正常的 HTTP模块在处理完请求后，会有一串 HTTP过滤器模块对请求的结果进行再处理。这样，当我们开发一个新的 HTTP模块时，不但可以使用诸如 HTTP核心模块、events模块、log模块等不同层次或者不同类型的模块，还可以原封不动地复用大量已有的 HTTP过滤器模块。这种低耦合度的优秀设计，造就了 Nginx庞大的第三方模块，当然，公开的第三方模块也如官方发布的模块一样容易使用。
Nginx 的模块都是嵌入到二进制文件中执行的，无论官方发布的模块还是第三方模块都是如此。这使得第三方模块一样具备极其优秀的性能，充分利用 Nginx的高并发特性，因此，许多高流量的网站都倾向于开发符合自己业务特性的定制模块。
【3】高可靠性：用于反向代理，宕机的概率微乎其微。高可靠性是我们选择 Nginx的最基本条件，因为 Nginx的可靠性是大家有目共睹的，很多家高流量网站都在核心服务器上大规模使用 Nginx。Nginx 的高可靠性来自于其核心框架代码的优秀设计、模块设计的简单性；另外，官方提供的常用模块都非常稳定，每个 worker进程相对独立，master 进程在1个 worker进程出错时可以快速 “拉起” 新的 worker子进程提供服务。
【4】低内存消耗：一般情况下，10,000 个非活跃的 HTTP Keep-Alive 连接在 Nginx中仅消耗 2.5MB的内存，这是 Nginx支持高并发连接的基础。开启 10 个 Nginx 才占 150M 内存。
【5】单机支持10万以上的并发连接：这是一个非常重要的特性！随着互联网的迅猛发展和互联网用户数量的成倍增长，各大公司、网站都需要应付海量并发请求，一个能够在峰值期顶住 10万以上并发请求的 Server，无疑会得到大家的青睐。理论上，Nginx 支持的并发连接上限取决于内存，10万远未封顶。当然，能够及时地处理更多的并发请求，是与业务特点紧密相关的。
【6】热部署：Master 管理进程与 Worker工作进程的分离设计，使得 Nginx能够提供热部署功能，即可以在 7×24小时不间断服务的前提下，升级 Nginx的可执行文件。当然，它也支持不停止服务就更新配置项、更换日志文件等功能。
【7】最自由的 BSD许可协议：这是 Nginx可以快速发展的强大动力。BSD许可协议不只是允许用户免费使用 Nginx，它还允许用户在自己的项目中直接使用或修改 Nginx源码，然后发布。这吸引了无数开发者继续为 Nginx贡献自己的智慧。
以上七个特点当然不是 Nginx的全部，拥有无数个官方功能模块、第三方功能模块使得 Nginx能够满足绝大部分应用场景，这些功能模块间可以叠加以实现更加强大、复杂的功能，有些模块还支持 Nginx与 Perl、Lua等脚本语言集成工作，大大提高了开发效率。这些特点促使用户在寻找一个 Web服务器时更多考虑 Nginx。选择 Nginx的核心理由还是它能在支持高并发请求的同时保持高效的服务。
【8】高性能：处理 2-3 万并发连接数，官方监测能支持 5 万并发。
